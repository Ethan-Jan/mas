package com.mingda.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrgEnabledExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public OrgEnabledExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	protected OrgEnabledExample(OrgEnabledExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table MEDICAL.ORG_ENABLED
	 * @ibatorgenerated  Thu Oct 08 14:19:54 CST 2015
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andOrganizationIdIsNull() {
			addCriterion("ORGANIZATION_ID is null");
			return this;
		}

		public Criteria andOrganizationIdIsNotNull() {
			addCriterion("ORGANIZATION_ID is not null");
			return this;
		}

		public Criteria andOrganizationIdEqualTo(String value) {
			addCriterion("ORGANIZATION_ID =", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdNotEqualTo(String value) {
			addCriterion("ORGANIZATION_ID <>", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdGreaterThan(String value) {
			addCriterion("ORGANIZATION_ID >", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdGreaterThanOrEqualTo(String value) {
			addCriterion("ORGANIZATION_ID >=", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdLessThan(String value) {
			addCriterion("ORGANIZATION_ID <", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdLessThanOrEqualTo(String value) {
			addCriterion("ORGANIZATION_ID <=", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdLike(String value) {
			addCriterion("ORGANIZATION_ID like", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdNotLike(String value) {
			addCriterion("ORGANIZATION_ID not like", value, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdIn(List<String> values) {
			addCriterion("ORGANIZATION_ID in", values, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdNotIn(List<String> values) {
			addCriterion("ORGANIZATION_ID not in", values, "organizationId");
			return this;
		}

		public Criteria andOrganizationIdBetween(String value1, String value2) {
			addCriterion("ORGANIZATION_ID between", value1, value2,
					"organizationId");
			return this;
		}

		public Criteria andOrganizationIdNotBetween(String value1, String value2) {
			addCriterion("ORGANIZATION_ID not between", value1, value2,
					"organizationId");
			return this;
		}

		public Criteria andHopitalStsIsNull() {
			addCriterion("HOPITAL_STS is null");
			return this;
		}

		public Criteria andHopitalStsIsNotNull() {
			addCriterion("HOPITAL_STS is not null");
			return this;
		}

		public Criteria andHopitalStsEqualTo(Integer value) {
			addCriterion("HOPITAL_STS =", value, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsNotEqualTo(Integer value) {
			addCriterion("HOPITAL_STS <>", value, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsGreaterThan(Integer value) {
			addCriterion("HOPITAL_STS >", value, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsGreaterThanOrEqualTo(Integer value) {
			addCriterion("HOPITAL_STS >=", value, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsLessThan(Integer value) {
			addCriterion("HOPITAL_STS <", value, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsLessThanOrEqualTo(Integer value) {
			addCriterion("HOPITAL_STS <=", value, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsIn(List<Integer> values) {
			addCriterion("HOPITAL_STS in", values, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsNotIn(List<Integer> values) {
			addCriterion("HOPITAL_STS not in", values, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsBetween(Integer value1, Integer value2) {
			addCriterion("HOPITAL_STS between", value1, value2, "hopitalSts");
			return this;
		}

		public Criteria andHopitalStsNotBetween(Integer value1, Integer value2) {
			addCriterion("HOPITAL_STS not between", value1, value2,
					"hopitalSts");
			return this;
		}

		public Criteria andHospitalTimeIsNull() {
			addCriterion("HOSPITAL_TIME is null");
			return this;
		}

		public Criteria andHospitalTimeIsNotNull() {
			addCriterion("HOSPITAL_TIME is not null");
			return this;
		}

		public Criteria andHospitalTimeEqualTo(Date value) {
			addCriterion("HOSPITAL_TIME =", value, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeNotEqualTo(Date value) {
			addCriterion("HOSPITAL_TIME <>", value, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeGreaterThan(Date value) {
			addCriterion("HOSPITAL_TIME >", value, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeGreaterThanOrEqualTo(Date value) {
			addCriterion("HOSPITAL_TIME >=", value, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeLessThan(Date value) {
			addCriterion("HOSPITAL_TIME <", value, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeLessThanOrEqualTo(Date value) {
			addCriterion("HOSPITAL_TIME <=", value, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeIn(List<Date> values) {
			addCriterion("HOSPITAL_TIME in", values, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeNotIn(List<Date> values) {
			addCriterion("HOSPITAL_TIME not in", values, "hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeBetween(Date value1, Date value2) {
			addCriterion("HOSPITAL_TIME between", value1, value2,
					"hospitalTime");
			return this;
		}

		public Criteria andHospitalTimeNotBetween(Date value1, Date value2) {
			addCriterion("HOSPITAL_TIME not between", value1, value2,
					"hospitalTime");
			return this;
		}

		public Criteria andManualStsIsNull() {
			addCriterion("MANUAL_STS is null");
			return this;
		}

		public Criteria andManualStsIsNotNull() {
			addCriterion("MANUAL_STS is not null");
			return this;
		}

		public Criteria andManualStsEqualTo(Integer value) {
			addCriterion("MANUAL_STS =", value, "manualSts");
			return this;
		}

		public Criteria andManualStsNotEqualTo(Integer value) {
			addCriterion("MANUAL_STS <>", value, "manualSts");
			return this;
		}

		public Criteria andManualStsGreaterThan(Integer value) {
			addCriterion("MANUAL_STS >", value, "manualSts");
			return this;
		}

		public Criteria andManualStsGreaterThanOrEqualTo(Integer value) {
			addCriterion("MANUAL_STS >=", value, "manualSts");
			return this;
		}

		public Criteria andManualStsLessThan(Integer value) {
			addCriterion("MANUAL_STS <", value, "manualSts");
			return this;
		}

		public Criteria andManualStsLessThanOrEqualTo(Integer value) {
			addCriterion("MANUAL_STS <=", value, "manualSts");
			return this;
		}

		public Criteria andManualStsIn(List<Integer> values) {
			addCriterion("MANUAL_STS in", values, "manualSts");
			return this;
		}

		public Criteria andManualStsNotIn(List<Integer> values) {
			addCriterion("MANUAL_STS not in", values, "manualSts");
			return this;
		}

		public Criteria andManualStsBetween(Integer value1, Integer value2) {
			addCriterion("MANUAL_STS between", value1, value2, "manualSts");
			return this;
		}

		public Criteria andManualStsNotBetween(Integer value1, Integer value2) {
			addCriterion("MANUAL_STS not between", value1, value2, "manualSts");
			return this;
		}

		public Criteria andManualTimeIsNull() {
			addCriterion("MANUAL_TIME is null");
			return this;
		}

		public Criteria andManualTimeIsNotNull() {
			addCriterion("MANUAL_TIME is not null");
			return this;
		}

		public Criteria andManualTimeEqualTo(Date value) {
			addCriterion("MANUAL_TIME =", value, "manualTime");
			return this;
		}

		public Criteria andManualTimeNotEqualTo(Date value) {
			addCriterion("MANUAL_TIME <>", value, "manualTime");
			return this;
		}

		public Criteria andManualTimeGreaterThan(Date value) {
			addCriterion("MANUAL_TIME >", value, "manualTime");
			return this;
		}

		public Criteria andManualTimeGreaterThanOrEqualTo(Date value) {
			addCriterion("MANUAL_TIME >=", value, "manualTime");
			return this;
		}

		public Criteria andManualTimeLessThan(Date value) {
			addCriterion("MANUAL_TIME <", value, "manualTime");
			return this;
		}

		public Criteria andManualTimeLessThanOrEqualTo(Date value) {
			addCriterion("MANUAL_TIME <=", value, "manualTime");
			return this;
		}

		public Criteria andManualTimeIn(List<Date> values) {
			addCriterion("MANUAL_TIME in", values, "manualTime");
			return this;
		}

		public Criteria andManualTimeNotIn(List<Date> values) {
			addCriterion("MANUAL_TIME not in", values, "manualTime");
			return this;
		}

		public Criteria andManualTimeBetween(Date value1, Date value2) {
			addCriterion("MANUAL_TIME between", value1, value2, "manualTime");
			return this;
		}

		public Criteria andManualTimeNotBetween(Date value1, Date value2) {
			addCriterion("MANUAL_TIME not between", value1, value2,
					"manualTime");
			return this;
		}
	}
}